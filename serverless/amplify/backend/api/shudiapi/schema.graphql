type Comment @model
  @searchable 
  @auth(rules: [
      {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]},
      {allow: groups, groups: ["Users"], operations: [read]},
      {allow: owner, operations: [read, create, update, delete]},
    ])
{
  id: ID!
  createdAt: String!
  updatedAt: String!
  body: String!
}

type Shudi 
  @model
  @searchable 
  @auth(rules: [
      {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]},
      {allow: groups, groups: ["Users"], operations: [read]},
      {allow: owner, operations: [read, create, update, delete]},
    ])
{
  id: ID!
  commentCount: Int!
  createdAt: String!
  updatedAt: String!
  description: String!
  winningOptionNumber: Int
  user: User @connection(name: "UserShudis")
}

type User 
  @model 
{
  id: ID!
  createdAt: String!
  updatedAt: String!
  name: String!
  votes: [Vote] @connection(name: "UserVotes", sortField: "createdAt")
  shudis: [Shudi] @connection(name: "UserShudis", sortField: "createdAt")
}

type Option 
  @model 
  @auth(rules: [
      {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]},
      {allow: groups, groups: ["Users"], operations: [read]},
      {allow: owner, operations: [read, create, update, delete]},
    ])
{
  id: ID!
  text: String!
  createdAt: String!
  updatedAt: String!
  imageUrl: String!
  voteCount: Int!
  votes: [Vote] @connection(name: "OptionVotes")
}

type Vote 
  @model 
  @auth(rules: [
      {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]},
      {allow: groups, groups: ["Users"], operations: [read]},
      {allow: owner, operations: [read, create, update, delete]},
    ])
{
  id: ID!
  createdAt: String!
  updatedAt: String!
  option: Option @connection(name: "OptionVotes")
  user: User @connection(name: "UserVotes")
}

input CreateCommentInput {
  id: ID
  createdAt: String
  updatedAt: String
  body: String!
}

input CreateOptionInput {
  id: ID
  text: String!
  createdAt: String
  updatedAt: String
  imageUrl: String!
  voteCount: Int
}

input CreateShudiInput {
  id: ID
  description: String!
}

input CreateVoteInput {
  id: ID
  createdAt: String
  updatedAt: String
}