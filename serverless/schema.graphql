type Organization {
  id: ID!
	name: String!
	logoUrl: String
	createdAt: String
	updatedAt: String
	ownerId: ID
	owner: User!
	campaigns: CampaignConnection
	users: UserConnection
}

type User {
	id: ID!
	name: String!
	title: String
	phone: String
	email: String
	organizationId: ID!
	createdAt: String
	updatedAt: String
	assignedRoles: AssignedRoleConnection
	organization: Organization
}

type UserConnection {
	items: [User]
	nextToken: String
}

type AssignedRole {
	id: ID!
	roleId: ID!
	userId: ID!
	createdAt: String
	updatedAt: String
	role: Role
	user: User
}

type AssignedRoleConnection {
	items: [AssignedRole]
	nextToken: String
}

type Role {
	id: ID!
	name: String!
	assignedRoles: AssignedRoleConnection
}

type Campaign {
	id: ID!
	name: String!
	templateId: ID
	organizationId: ID
	organization: Organization
	template: CampaignTemplate
	surveys: SurveyConnection
}

type CampaignConnection {
	items: [Campaign]
	nextToken: String
}

type CampaignTemplate {
	id: ID!
	name: String!
	campaigns: CampaignConnection
	surveyTemplates: SurveyTemplateConnection
}

type CampaignTemplateConnection {
	items: [CampaignTemplate]
	nextToken: String
}

type SurveyTemplate {
	id: ID!
	name: String!
	position: Int!
	campaignTemplateId: ID!
	campaignTemplate: CampaignTemplate
	prompts: PromptConnection
	surveys: SurveyConnection
}

type SurveyTemplateConnection {
	items: [SurveyTemplate]
	nextToken: String
}

type Prompt {
	id: ID!
	body: String!
	position: Int!
	surveyTemplateId: ID
	surveyTemplate: SurveyTemplate
	options: OptionConnection
}

type PromptConnection {
	items: [Prompt]
	nextToken: String
}

type Option {
	id: ID!
	value: Int!
	name: String!
	iconUrl: String
	promptId: ID!
	position: Int!
	prompt: Prompt
	responses: ResponseConnection
}

type OptionConnection {
	items: [Option]
	nextToken: String
}

type Survey {
	id: ID!
	userId: ID!
	campaignId: ID!
	surveyTemplateId: ID!
	phone: String
	email: String
	patientIdentifier: String
	caregiverIdentifier: String
	user: User!
	campaign: Campaign!
	surveyTemplate: SurveyTemplate!
	responses: ResponseConnection
	createdAt: String
}

type SurveyConnection {
	items: [Survey]
	nextToken: String
}

type Response {
	id: ID!
	optionId: ID!
	surveyId: ID!
	option: Option!
	survey: Survey
}

type ResponseConnection {
	items: [Response]
	nextToken: String
}

input CreateOrganizationInput {
	id: ID
	name: String!
	logoUrl: String
	createdAt: String
	updatedAt: String
	ownerId: ID
}

input CreateRoleInput {
	id: ID
	name: String!
}

input CreateAssignedRoleInput {
	id: ID
	roleId: ID!
	userId: ID!
	createdAt: String
	updatedAt: String
}

input CreateResponseInput {
	id: ID
	optionId: ID!
	surveyId: ID!
}

input CreateSurveyInput {
	id: ID
	userId: ID!
	campaignId: ID!
	surveyTemplateId: ID!
	position: Int!
	phone: String
	email: String
	patientIdentifier: String
	caregiverIdentifier: String
	createdAt: String
}

input CreateOptionInput {
	id: ID
	value: Int!
	name: String!
	iconUrl: String
	position: Int!
	promptId: ID!
}

input CreatePromptInput {
	id: ID
	body: String!
	position: Int!
	surveyTemplateId: ID!
}

input CreateCampaignTemplateInput {
	id: ID
	name: String!
}

input CreateCampaignInput {
	id: ID
	name: String!
	templateId: ID!
	organizationId: ID!
}

input CreateUserInput {
	id: ID
	name: String!
	title: String
	phone: String
	email: String
	createdAt: String
	updatedAt: String
	organizationId: ID!
}

input CreateSurveyTemplateInput {
	id: ID
	name: String!
	position: Int!
	campaignTemplateId: ID!
}

type Mutation {
	createOrganization(input: CreateOrganizationInput!): Organization
	createResponse(input: CreateResponseInput!): Response
	createAssignedRole(input: CreateAssignedRoleInput!): AssignedRole
	createRole(input: CreateRoleInput!): Role
	createSurvey(input: CreateSurveyInput!): Survey
	createSurveyTemplate(input: CreateSurveyTemplateInput!): SurveyTemplate
	createOption(input: CreateOptionInput!): Option
	createPrompt(input: CreatePromptInput!): Prompt
	createCampaignTemplate(input: CreateCampaignTemplateInput!): CampaignTemplate
	createCampaign(input: CreateCampaignInput!): Campaign
	createUser(input: CreateUserInput!): User
}

type Query {
	listCampaignTemplates(first: Int, after: String): CampaignTemplateConnection
}

type Subscription {
  onCreateOrganization: Organization
		@aws_subscribe(mutations: ["createOrganization"])
}


schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}