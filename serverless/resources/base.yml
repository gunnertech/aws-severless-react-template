# Transform: "AWS::Serverless-2016-10-31"
Parameters:
  service:
    Type: String
    Default: ${self:custom.serviceName}
  stage:
    Type: String
    Default: ${self:custom.stage}
  uploadBucketName:
    Type: String
    Default: ${self:custom.uploadBucketName}
  awsRegion:
    Type: String
    Default: ${self:custom.region}
  dbClusterMasterUserName:
    Type: String
    Default: ${self:custom.secrets.DB_CLUSTER_MASTER_USERNAME, ''}
  dbClusterMasterPassword:
    Type: String
    Default: ${self:custom.secrets.DB_CLUSTER_MASTER_PASSWORD, ''}
  identifier:
    Type: String
    Default: ${self:custom.identifier}
  domainName:
    Type: String
    Default: ${self:custom.domainName, 'NONE'}
  userPoolId:
    Type: String
    Default: ${self:custom.userPoolId, 'NONE'}
  authRoleName:
    Type: String
    Default: ${self:custom.authRoleName, 'NONE'}
  unAuthRoleName:
    Type: String
    Default: ${self:custom.unAuthRoleName, 'NONE'}
  systemEmailAddress:
    Type: String
    Default: ${self:custom.environment.SYSTEM_EMAIL_ADDRESS, ""}
  setupAmplifyHosting:
    Type: String
    Default: ${self:custom.environment.SETUP_AMPLIFY_HOSTING, ""}
  errorQueueName:
    Type: String
    Default: ${self:custom.environment.ERROR_QUEUE_NAME}

Conditions:
  HasClusterUserName:
    Fn::Not:
      - Fn::Equals:
        - Ref: dbClusterMasterUserName
        - ''
  
  ShouldSendVerificationEmail:
    Fn::Not:
      - Fn::Equals:
        - Ref: systemEmailAddress
        - ""

  ShouldSetupAmplifyHosting:
    Fn::Not:
      - Fn::Equals:
        - Ref: setupAmplifyHosting
        - ""

  ShouldCreateDbCluster:
    Fn::And:
      - Fn::Not:
        - Fn::Equals:
          - Ref: dbClusterMasterPassword
          - ""
      - Condition: HasClusterUserName

  ShouldCreateUserPoolGroups:
    Fn::Not:
      - Fn::Equals:
        - Ref: userPoolId
        - "NONE"

  ShouldCreateHostedZone:
    Fn::Not:
      - Fn::Equals:
        - Ref: domainName
        - "NONE"

  ShouldCreateCustomUnAuthPolicy:
    Fn::Not:
      - Fn::Equals:
        - Ref: unAuthRoleName
        - "NONE"

  ShouldCreateCustomPolicy:
    Fn::Not:
      - Fn::Equals:
        - Ref: authRoleName
        - "NONE"
  
  ShouldSetupAmplifyDomain:
    Fn::And:
      - Condition: ShouldSetupAmplifyHosting
      - Condition: ShouldCreateHostedZone

Outputs:
  CdnDomainName:
    Description: The domain name of the cloudfront distribution
    Value: 
      "Fn::GetAtt": [ CDN, DomainName ]

Resources:
  ErrorQueue:
    Type: "AWS::SQS::Queue"
    DependsOn: ErrorDeadLetterQueue
    Properties:
      QueueName: 
        Ref: errorQueueName
      VisibilityTimeout: 60
      DelaySeconds: 5
      RedrivePolicy:
        deadLetterTargetArn:
          "Fn::GetAtt":
            - ErrorDeadLetterQueue
            - Arn
        maxReceiveCount: 10
  ErrorDeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: 
        Fn::Join: [ "", [ {Ref: errorQueueName}, "DeadLetter" ] ]
      MessageRetentionPeriod: 1209600

  ErrorLogNotificationSns:
    Type: "AWS::SNS::Topic"
    Condition: ShouldSendVerificationEmail
    Properties:
      Subscription:
      - Endpoint: "support@gunnertech.com"
        Protocol: email

  AmplifyRole:
    Type: AWS::IAM::Role
    Condition: ShouldSetupAmplifyHosting
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - amplify.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Amplify
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'amplify:*'
                Resource: '*'

  AmplifyApp:
    Type: "AWS::Amplify::App"
    Condition: ShouldSetupAmplifyHosting
    Properties:
      Repository: 
        Fn::Join: 
          - ''
          - - 'https://git-codecommit.us-east-1.amazonaws.com/v1/repos/'
            - Ref: service
            - '-'
            - Ref: stage
      Name:
        Ref: service
      IAMServiceRole: !GetAtt AmplifyRole.Arn
      EnvironmentVariables: ${file(./resources/hosting.yml)}
      CustomRules:
        - Source: '</^[^.]+$|\.(?!(css|mp4|json|gif|ico|jpg|js|png|txt|svg|woff|ttf|map)$)([^.]+$)/>'
          Target: /index.html
          Status: '200'
        - Source: '/<*>'
          Target: /index.html
          Status: '404'
      BuildSpec: |-
        version: 0.1
        frontend:
          phases:
            preBuild:
              commands:
                - cd react-client
                - npm install
            build:
              commands:
                - npm run build
          artifacts:
            baseDirectory: /react-client/build
            discardPaths: true
            files:
              - '**/*'
          cache:
            paths:
              - node_modules/**/*
              - react-client/node_modules/**/*

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Condition: ShouldSetupAmplifyHosting
    Properties:
      BranchName: 
        Ref: stage
      AppId: !GetAtt AmplifyApp.AppId
      EnableAutoBuild: true

  AmplifyDomain:
    Type: AWS::Amplify::Domain
    Condition: ShouldSetupAmplifyDomain
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      DomainName: 
        Ref: domainName
      SubDomainSettings:
        - Prefix: www
          BranchName: !GetAtt AmplifyBranch.BranchName
      
  LambdaErrorAlarm:
    DependsOn: ErrorLogNotificationSns
    Type: AWS::CloudWatch::Alarm
    Condition: ShouldSendVerificationEmail
    Properties:
      AlarmName: ErrorLogNotification
      AlarmDescription: When Lambda error occurs it will be notified through SNS
      Namespace: 'AWS/Lambda'
      MetricName: Errors
      # Dimensions:
      #   - Name: FunctionName
      #     Value: ${self:service}-${self:provider.stage}-NotificationSend
      Statistic: Minimum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      Period: 60
      EvaluationPeriods: 1
      AlarmActions:
        - Ref: ErrorLogNotificationSns

  DbSecret:
    Condition: ShouldCreateDbCluster
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: HttpRDSSecret
      Description: "RDS DB Cluster Secret"
      SecretString: 
        Fn::Join: 
          - ''
          - - '{"username":"'
            - Ref: dbClusterMasterUserName
            - '","password":"'
            - Ref: dbClusterMasterPassword
            - '"}'

  DbCluster:
    Condition: ShouldCreateDbCluster
    Type: "AWS::RDS::DBCluster"
    Properties:
      SourceRegion:
        Ref: awsRegion
      Engine: 'aurora'
      EngineMode: 'serverless'
      MasterUsername: 
        Ref: dbClusterMasterUserName
      MasterUserPassword: 
        Ref: dbClusterMasterPassword
      DBClusterIdentifier: 
        Fn::Join: 
          - '-'
          - - Ref: identifier
            - 'cluster'

  AddUserToGroupIamPolicy:
    Condition: ShouldCreateCustomPolicy
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: 
              - "ses:SendEmail"
              - "cognito-idp:ListUsers"
            Resource: "*"
      PolicyName: ServerlessCustomPolicy
      Roles:
        - Ref: authRoleName

  AddUserToUnAuthIamPolicy:
    Condition: ShouldCreateCustomUnAuthPolicy
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: 
              - "cognito-idp:ListUsers"
            Resource: "*"
      PolicyName: UnAuthCustomPolicy
      Roles:
        - Ref: unAuthRoleName
  
  CognitoUserPoolUsersGroup:
    Condition: ShouldCreateUserPoolGroups
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Users
      UserPoolId:
        Ref: userPoolId



  UploadBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: 
        Ref: uploadBucketName
      PolicyDocument: 
        Statement: 
          - 
            Action: 
              - "s3:GetObject"
            Effect: "Allow"
            Resource: { 'Fn::Join': ['', ['arn:aws:s3:::', { 'Ref': "uploadBucketName" }, "/*"]] }
            Principal:
              AWS: { 'Fn::Join': ['', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ', { 'Ref': "OriginAccessIdentity" }]] }
          - 
            Action: 
              - "s3:GetObject"
            Effect: "Allow"
            Resource: { 'Fn::Join': ['', ['arn:aws:s3:::', { 'Ref': "uploadBucketName" }, "/*"]] }
            Principal: '*'
  OriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "AccessFor"
  CDN:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: { 'Fn::Join': ['', [{ 'Ref': "uploadBucketName" }, ".s3.amazonaws.com"]] }
            Id: { 'Fn::Join': ['', ['S3-', { 'Ref': "uploadBucketName" }]] }
            S3OriginConfig:
              OriginAccessIdentity: { 'Fn::Join': ['/', ['origin-access-identity', 'cloudfront', { 'Ref': "OriginAccessIdentity" }]] }
        DefaultCacheBehavior:
          ViewerProtocolPolicy: https-only
          TargetOriginId: { 'Fn::Join': ['', ['S3-', { 'Ref': "uploadBucketName" }]] }
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          MinTTL: 0
          ForwardedValues:
            QueryString: false
  RepoSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
      - Endpoint: "support@gunnertech.com"
        Protocol: email
  MyRepo:
    Type: "AWS::CodeCommit::Repository"
    DependsOn: RepoSNSTopic
    Properties:
      RepositoryName: 
        Ref: identifier
      RepositoryDescription: CodeCommit Repository
      Triggers:
      - Name: MasterTrigger
        DestinationArn:
          Ref: RepoSNSTopic
        Events:
        - all
  DNS: 
    Condition: ShouldCreateHostedZone
    Type: "AWS::Route53::HostedZone"
    Properties: 
      HostedZoneConfig: 
        Comment: "The hosted zone"
      Name: 
        Ref: domainName
  CognitoAdminsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Federated:
                - "cognito-identity.amazonaws.com" 
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated

  CognitoAdminsIamPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: 
              - "cognito-idp:AdminAddUserToGroup"
              - "cognito-idp:AdminRemoveUserFromGroup"
              - "cognito-idp:AdminSetUserPassword"
              - "cognito-idp:DescribeUserPool"
              - "cognito-idp:AdminGetUser"
              - "cognito-idp:AdminUpdateUserAttributes"
              - "cognito-idp:AdminListGroupsForUser"
              - "cognito-idp:AdminCreateUser"
              - "cognito-idp:ListUsers"
            Resource: "arn:aws:cognito-idp:*:*:userpool/*"
          - 
            Effect: "Allow"
            Action: 
              - "ses:SendEmail"
            Resource: "arn:aws:ses:*"
          - 
            Effect: "Allow"
            Action: 
              - "mobileanalytics:*"
              - "mobiletargeting:*"
            Resource: "*"
          - 
            Effect: "Allow"
            Action: 
              - "s3:*"
            Resource: "*"
      PolicyName: CognitoAdminsIamPolicy
      Roles:
        - Ref: CognitoAdminsRole
  # Macro:
  #   Type: AWS::CloudFormation::Macro
  #   Properties:
  #     FunctionName:
  #       Fn::GetAtt:
  #         - GetStackLastUpdatedTimeLambdaFunction
  #         - Arn
  #     Name: StackLastUpdatedTime
  VerificationEmail:
    # DependsOn: Macro
    Condition: ShouldSendVerificationEmail
    Type: Custom::VerificationEmail
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - SendVerificationEmailLambdaFunction
          - Arn
  VerificationDomain:
    Condition: ShouldCreateHostedZone
    Type: Custom::VerificationDomain
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - VerifyDomainLambdaFunction
          - Arn
  VerificationDkim:
    Condition: ShouldCreateHostedZone
    Type: Custom::VerificationDkim
    Properties:
      HostedZoneId: { Ref: DNS }
      ServiceToken:
        Fn::GetAtt:
          - VerifyDkimLambdaFunction
          - Arn
  AdminCognitoGroupMapping:
    Type: Custom::AdminCognitoGroupMapping
    Properties:
      TriggerVersion: 1
      CognitoAdminsRoleArn: 
        Fn::GetAtt: [ CognitoAdminsRole, Arn ]
      ServiceToken:
        Fn::GetAtt:
          - CreateIdentityPoolMappingLambdaFunction
          - Arn