service:
  name: ${self:custom.environment.SERVICE}

custom:
  serviceName: ${self:service.name}
  accountId: { Ref: AWS::AccountId }
  identifier: ${self:service.name}-${self:custom.stage}
  environment: ${file(env.yml):${self:custom.stage}}
  secrets: ${file(secrets.yml):${self:custom.stage}}
  domainName: ${self:custom.environment.DOMAIN_NAME}
  userPoolId: ${file(amplify/config.js):env.aws_user_pools_id}
  authRoleName: ${file(amplify/custom.js):custom.auth_role_name}
  unAuthRoleName: ${file(amplify/custom.js):custom.unauth_role_name}
  uploadBucketName: ${file(amplify/config.js):env.aws_user_files_s3_bucket}
  stage: ${file(amplify/stage.js):stage}
  region: ${opt:region, self:provider.region}
  prune:
    automatic: true
    number: 3
  webpack:
    webpackConfig: ./webpack.config.js 
    includeModules: true
  # output:
  #   handler: scripts/output.handler
  #   file: .build/stack.yml

package:
  individually: false

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function


provider:
  name: aws
  runtime: nodejs12.x
  tracing:
    apiGateway: true
    lambda: true
  stage: ${file(amplify/stage.js):stage}
  region: ${file(amplify/config.js):env.aws_project_region, 'us-east-1'}
  profile: "${self:service.name}-${file(amplify/stage.js):stage}developer"
  environment:
    AWS_ACCOUNT_ID: { Ref: AWS::AccountId }
    SYSTEM_EMAIL_ADDRESS: ${self:custom.environment.SYSTEM_EMAIL_ADDRESS}
    DOMAIN_NAME: ${self:custom.environment.DOMAIN_NAME}
    ERROR_QUEUE_NAME: ${self:custom.environment.ERROR_QUEUE_NAME}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "cloudformation:describeStacks"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
        - "ses:VerifyEmailIdentity"
        - "ses:VerifyDomainIdentity"
        - "ses:VerifyDomainDkim"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
        - "sqs:ChangeMessageVisibility"
        - "sqs:DeleteMessage"
        - "sqs:GetQueueAttributes"
        - "sqs:ReceiveMessage"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "sqs:ListQueues"
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:*
        - SNS:Publish
        - SNS:*
        - secretsmanager:GetSecretValue
      Resource: "*"
    - Effect: Allow
      Action:
        - cognito-idp:AdminAddUserToGroup
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:AdminCreateUser
      Resource: "*"
    - Effect: Allow
      Action:
        - iam:ListRoles
        - iam:PassRole
      Resource: "*"
    - Effect: Allow
      Action:
        - "cognito-identity:SetIdentityPoolRoles"
        - "cognito-identity:ListIdentityPools"
      Resource: "*"
    - Effect: Allow
      Action:
        - "firehose:PutRecord"
        - "firehose:PutRecordBatch"
      Resource: "*"
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
    - Effect: Allow
      Action:
        - appsync:GraphQL
      Resource: "*"
 
resources:
  - ${file(./resources/base.yml)}
  - ${file(./resources/custom.yml)}

functions:
  - ${file(./functions/base.yml)}
  - ${file(./functions/custom.yml)}