service:
  name: ${self:custom.environment.SERVICE}

custom:
  accountId: { Ref: AWS::AccountId }
  identifier: ${self:service.name}-${self:custom.stage}
  environment: ${file(env.yml):${self:custom.stage}}
  secrets: ${file(secrets.yml):${self:custom.stage}}
  domainName: ${self:custom.environment.DOMAIN_NAME}
  userPoolId: ${file(amplifyconfig.js):env.aws_user_pools_id}
  guestUserName: ${self:custom.environment.GUEST_USER_NAME}
  # authRoleName: ${self:custom.environment.AUTH_ROLE_NAME}
  authRoleName: ${file(amplifycustom.js):custom.auth_role_name}
  adminUserId: ${file(amplifycustom.js):custom.adminUserId}
  uploadBucketName: ${file(amplifyconfig.js):env.aws_user_files_s3_bucket}
  # stage: ${opt:stage, self:provider.stage}
  stage: ${file(amplifystage.js):stage}
  region: ${opt:region, self:provider.region}
  webpack:
    webpackConfig: ./webpack.config.js 
    includeModules: true
  output:
    handler: scripts/output.handler
    file: .build/stack.yml

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-stack-output

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${file(amplifystage.js):stage}
  region: ${file(amplifyconfig.js):env.aws_project_region, 'us-east-1'}
  profile: "${self:service.name}-${file(amplifystage.js):stage}developer"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
        - SNS:Publish
        - SES:Publish
        - SNS:*
        - secretsmanager:GetSecretValue
      Resource: "*"

resources:
  Parameters:
    uploadBucketName:
      Type: String
      Default: ${self:custom.uploadBucketName}
    awsRegion:
      Type: String
      Default: ${self:custom.region}
    dbClusterMasterUserName:
      Type: String
      Default: ${self:custom.secrets.DB_CLUSTER_MASTER_USERNAME, ''}
    dbClusterMasterPassword:
      Type: String
      Default: ${self:custom.secrets.DB_CLUSTER_MASTER_PASSWORD, ''}
    identifier:
      Type: String
      Default: ${self:custom.identifier}
    domainName:
      Type: String
      Default: ${self:custom.domainName, 'NONE'}
    userPoolId:
      Type: String
      Default: ${self:custom.userPoolId, 'NONE'}
    guestUserName:
      Type: String
      Default: ${self:custom.guestUserName, 'NONE'}
    adminUserName:
      Type: String
      Default: ${self:custom.secrets.ADMIN_USERNAME, ''}
    adminUserPassword:
      Type: String
      Default: ${self:custom.secrets.ADMIN_PASSWORD, ''}
    adminUserId:
      Type: String
      Default: ${self:custom.adminUserId, ''}
    authRoleName:
      Type: String
      Default: ${self:custom.authRoleName, 'NONE'}

  Conditions:
    HasClusterUserName:
      Fn::Not:
        - Fn::Equals:
          - Ref: dbClusterMasterUserName
          - ''
    
    ShouldCreateDbCluster:
      Fn::And:
        - Fn::Not:
          - Fn::Equals:
            - Ref: dbClusterMasterPassword
            - ""
        - Condition: HasClusterUserName

    ShouldCreateAdminUserSecret:
      Fn::Not:
        - Fn::Equals:
          - Ref: adminUserPassword
          - ""

    ShouldCreateGuestUser:
      Fn::And:
        - Fn::Not:
          - Fn::Equals:
            - Ref: guestUserName
            - "NONE"
        - Condition: ShouldCreateUserPoolGroups

    ShouldCreateAdminUser:
      Fn::And:
        - Fn::Not:
          - Fn::Equals:
            - Ref: adminUserName
            - ""
        - Condition: ShouldCreateUserPoolGroups
    
    ShouldAddAdminUserToGroup:
      Fn::Not:
        - Fn::Equals:
          - Ref: adminUserId
          - ""

    ShouldCreateUserPoolGroups:
      Fn::Not:
        - Fn::Equals:
          - Ref: userPoolId
          - "NONE"

    ShouldCreateHostedZone:
      Fn::Not:
        - Fn::Equals:
          - Ref: domainName
          - "NONE"

    ShouldCreateAddUserToGroupPolicy:
      Fn::Not:
        - Fn::Equals:
          - Ref: authRoleName
          - "NONE"
      
  Outputs:
    CdnDomainName:
      Description: The domain name of the cloudfront distribution
      Value: 
        "Fn::GetAtt": [ CDN, DomainName ]

  Resources:
    AdminUserSecret:
      Condition: ShouldCreateAdminUserSecret
      Type: "AWS::SecretsManager::Secret"
      Properties:
        Name: AdminUserSecret
        Description: "Admin User Secret"
        SecretString: 
          Fn::Join: 
            - ''
            - - '{"username":"'
              - Ref: adminUserName
              - '","password":"'
              - Ref: adminUserPassword
              - '"}'

    DbSecret:
      Condition: ShouldCreateDbCluster
      Type: "AWS::SecretsManager::Secret"
      Properties:
        Name: HttpRDSSecret
        Description: "RDS DB Cluster Secret"
        SecretString: 
          Fn::Join: 
            - ''
            - - '{"username":"'
              - Ref: dbClusterMasterUserName
              - '","password":"'
              - Ref: dbClusterMasterPassword
              - '"}'

    DbCluster:
      Condition: ShouldCreateDbCluster
      Type: "AWS::RDS::DBCluster"
      Properties:
        SourceRegion:
          Ref: awsRegion
        Engine: 'aurora'
        EngineMode: 'serverless'
        MasterUsername: 
          Ref: dbClusterMasterUserName
        MasterUserPassword: 
          Ref: dbClusterMasterPassword
        DBClusterIdentifier: 
          Fn::Join: 
            - '-'
            - - Ref: identifier
              - 'cluster'

    AddUserToGroupIamPolicy:
      Condition: ShouldCreateAddUserToGroupPolicy
      Type: AWS::IAM::Policy
      Properties: 
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action: 
                - "cognito-idp:AdminAddUserToGroup"
                - "cognito-idp:DescribeUserPool"
              Resource: "arn:aws:cognito-idp:*:*:userpool/*"
            - 
              Effect: "Allow"
              Action: 
                - "ses:SendEmail"
              Resource: "arn:aws:ses:us-east-1:*"
        PolicyName: AddUserToGroupPolicy
        Roles:
          - Ref: authRoleName
    
    CognitoUserApiUser:
      Condition: ShouldCreateGuestUser
      Type: AWS::Cognito::UserPoolUser
      Properties:
        Username: 
          Ref: guestUserName
        DesiredDeliveryMediums:
          - EMAIL
        UserPoolId:
          Ref: userPoolId
        UserAttributes:
          - Name: email
            Value:
              Ref: guestUserName
          - Name: name
            Value: "API"
          - Name: email_verified
            Value: "true"

    CognitoUserPoolAdmin:
      Condition: ShouldCreateAdminUser
      Type: AWS::Cognito::UserPoolUser
      Properties:
        Username: 
          Ref: adminUserName
        DesiredDeliveryMediums:
          - EMAIL
        UserPoolId:
          Ref: userPoolId
        UserAttributes:
          - Name: name
            Value: 'Admin'
          - Name: email
            Value:
              Ref: adminUserName
          - Name: email_verified
            Value: "true"
    
    CognitoUserPoolUserToGroupAttachment:
      Condition: ShouldAddAdminUserToGroup
      DependsOn: 
        - CognitoUserPoolAdmin
        - CognitoUserPoolAdminsGroup
      Type: AWS::Cognito::UserPoolUserToGroupAttachment
      Properties:
        GroupName: Admins
        Username: 
          Ref: adminUserId
        UserPoolId:
          Ref: userPoolId

    CognitoUserPoolUsersGroup:
      Condition: ShouldCreateUserPoolGroups
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: Users
        UserPoolId:
          Ref: userPoolId

    CognitoUserPoolAdminsGroup:
      Condition: ShouldCreateUserPoolGroups
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: Admins
        UserPoolId:
          Ref: userPoolId

    UploadBucketPolicy: 
      Type: AWS::S3::BucketPolicy
      Properties: 
        Bucket: 
          Ref: uploadBucketName
        PolicyDocument: 
          Statement: 
            - 
              Action: 
                - "s3:GetObject"
              Effect: "Allow"
              Resource: { 'Fn::Join': ['', ['arn:aws:s3:::', { 'Ref': "uploadBucketName" }, "/*"]] }
              Principal:
                AWS: { 'Fn::Join': ['', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ', { 'Ref': "OriginAccessIdentity" }]] }
            - 
              Action: 
                - "s3:GetObject"
              Effect: "Allow"
              Resource: { 'Fn::Join': ['', ['arn:aws:s3:::', { 'Ref': "uploadBucketName" }, "/*"]] }
              Principal: '*'
    OriginAccessIdentity:
      Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
      Properties:
         CloudFrontOriginAccessIdentityConfig:
          Comment: "AccessFor"
    CDN:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
          Enabled: true
          HttpVersion: http2
          Origins:
            - DomainName: { 'Fn::Join': ['', [{ 'Ref': "uploadBucketName" }, ".s3.amazonaws.com"]] }
              Id: { 'Fn::Join': ['', ['S3-', { 'Ref': "uploadBucketName" }]] }
              S3OriginConfig:
                OriginAccessIdentity: { 'Fn::Join': ['/', ['origin-access-identity', 'cloudfront', { 'Ref': "OriginAccessIdentity" }]] }
          DefaultCacheBehavior:
            ViewerProtocolPolicy: https-only
            TargetOriginId: { 'Fn::Join': ['', ['S3-', { 'Ref': "uploadBucketName" }]] }
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            MinTTL: 0
            ForwardedValues:
              QueryString: false
    RepoSNSTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        Subscription:
        - Endpoint: "support@gunnertech.com"
          Protocol: email
    MyRepo:
      Type: "AWS::CodeCommit::Repository"
      DependsOn: RepoSNSTopic
      Properties:
        RepositoryName: 
          Ref: identifier
        RepositoryDescription: CodeCommit Repository
        Triggers:
        - Name: MasterTrigger
          DestinationArn:
            Ref: RepoSNSTopic
          Events:
          - all
    DNS: 
      Condition: ShouldCreateHostedZone
      Type: "AWS::Route53::HostedZone"
      Properties: 
        HostedZoneConfig: 
          Comment: "My hosted zone d"
        Name: 
          Ref: domainName
        
functions:
  dummy: # NEED AT LEAST ONE FUNCTION OR WON'T DEPLOY
    handler: first.hello
