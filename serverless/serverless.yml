service:
  name: simplisurvey

custom:
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):dev}
  pinpointAppId: ${self:custom.environment.PINPOINT_APP_ID, 'NONE'}
  stage: ${opt:stage, self:provider.stage}
  devAccountId: "658832833553"
  stagingAccountId: "658832833553"
  prodAccountId: "658832833553"
  accountId: ${self:custom.${self:custom.stage}AccountId}
  region: ${opt:region, self:provider.region}
  uploadBucketName: "com-gunnertech-${self:service.name}-${self:custom.stage}"
  appSync:
    name:  "${self:custom.stage}-api"
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:custom.region}
      defaultAction: ALLOW
      userPoolId: { Ref: UserPool }
    mappingTemplates:
      - dataSource: Campaigns
        type: Organization
        field: campaigns
        request: "Organization.campaigns-request.vtl"
        response: "Organization.campaigns-response.vtl"
      - dataSource: Roles
        type: AssignedRole
        field: role
        request: "AssignedRole.role-request.vtl"
        response: "AssignedRole.role-response.vtl"
      - dataSource: Roles
        type: Query
        field: queryRolesByNameIdIndex
        request: "queryRolesByNameIdIndex-request.vtl"
        response: "queryRolesByNameIdIndex-response.vtl"
      - dataSource: Invitations
        type: Query
        field: queryInvitationsByOrganizationIdIdIndex
        request: "queryInvitationsByOrganizationIdIdIndex-request.vtl"
        response: "queryInvitationsByOrganizationIdIdIndex-response.vtl"
      - dataSource: Users
        type: Query
        field: queryUsersByOrganizationIdCreatedAtIndex
        request: "queryUsersByOrganizationIdCreatedAtIndex-request.vtl"
        response: "queryUsersByOrganizationIdCreatedAtIndex-response.vtl"
      - dataSource: Organizations
        type: User
        field: organization
        request: "User.organization-request.vtl"
        response: "User.organization-response.vtl"
      - dataSource: AssignedRoles
        type: User
        field: assignedRoles
        request: "User.assignedRoles-request.vtl"
        response: "User.assignedRoles-response.vtl"
      - dataSource: SurveyTemplates
        type: CampaignTemplate
        field: surveyTemplates
        request: "CampaignTemplate.surveyTemplates-request.vtl"
        response: "CampaignTemplate.surveyTemplates-response.vtl"
      - dataSource: Prompts
        type: SurveyTemplate
        field: prompts
        request: "SurveyTemplate.prompts-request.vtl"
        response: "SurveyTemplate.prompts-response.vtl"
      - dataSource: Options
        type: Prompt
        field: options
        request: "Prompt.options-request.vtl"
        response: "Prompt.options-response.vtl"
      - dataSource: CampaignTemplates
        type: Campaign
        field: campaignTemplate
        request: "Campaign.campaignTemplate-request.vtl"
        response: "Campaign.campaignTemplate-response.vtl"
      - dataSource: Users
        type: Mutation
        field: createUser
        request: "createUser-request.vtl"
        response: "createUser-response.vtl"
      - dataSource: Invitations
        type: Mutation
        field: createInvitation
        request: "createInvitation-request.vtl"
        response: "createInvitation-response.vtl"
      - dataSource: Users
        type: Mutation
        field: updateUser
        request: "updateUser-request.vtl"
        response: "updateUser-response.vtl"
      - dataSource: Campaigns
        type: Mutation
        field: updateCampaign
        request: "updateCampaign-request.vtl"
        response: "updateCampaign-response.vtl"
      - dataSource: Organizations
        type: Mutation
        field: updateOrganization
        request: "updateOrganization-request.vtl"
        response: "updateOrganization-response.vtl"
      - dataSource: Users
        type: Query
        field: getUser
        request: "getUser-request.vtl"
        response: "getUser-response.vtl"
      - dataSource: CampaignTemplates
        type: Query
        field: listCampaignTemplates
        request: "listCampaignTemplates-request.vtl"
        response: "listCampaignTemplates-response.vtl"
      - dataSource: Invitations
        type: Query
        field: listInvitations
        request: "listInvitations-request.vtl"
        response: "listInvitations-response.vtl"
      - dataSource: Organizations
        type: Mutation
        field: createOrganization
        request: "createOrganization-request.vtl"
        response: "createOrganization-response.vtl"
      - dataSource: Campaigns
        type: Mutation
        field: createCampaign
        request: "createCampaign-request.vtl"
        response: "createCampaign-response.vtl"
      - dataSource: Roles
        type: Mutation
        field: createRole
        request: "createRole-request.vtl"
        response: "createRole-response.vtl"
      - dataSource: AssignedRoles
        type: Mutation
        field: createAssignedRole
        request: "createAssignedRole-request.vtl"
        response: "createAssignedRole-response.vtl"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: Invitations
        description: 'Invitations table'
        config:
          tableName: { Ref: InvitationTable }
      - type: AMAZON_DYNAMODB
        name: Users
        description: 'Users table'
        config:
          tableName: { Ref: UserTable }
      - type: AMAZON_DYNAMODB
        name: Organizations
        description: 'Organizations table'
        config:
          tableName: { Ref: OrganizationTable }
      - type: AMAZON_DYNAMODB
        name: Roles
        description: 'Roles table'
        config:
          tableName: { Ref: RoleTable }
      - type: AMAZON_DYNAMODB
        name: AssignedRoles
        description: 'AssignedRoles table'
        config:
          tableName: { Ref: AssignedRoleTable }
      - type: AMAZON_DYNAMODB
        name: Campaigns
        description: 'Campaigns table'
        config:
          tableName: { Ref: CampaignTable }
      - type: AMAZON_DYNAMODB
        name: CampaignTemplates
        description: 'Campaign Templates table'
        config:
          tableName: { Ref: CampaignTemplateTable }
      - type: AMAZON_DYNAMODB
        name: SurveyTemplates
        description: 'SurveyTemplates table'
        config:
          tableName: { Ref: SurveyTemplateTable }
      - type: AMAZON_DYNAMODB
        name: Prompts
        description: 'Prompts table'
        config:
          tableName: { Ref: PromptTable }
      - type: AMAZON_DYNAMODB
        name: Options
        description: 'Options table'
        config:
          tableName: { Ref: OptionTable }

plugins:
  - serverless-webpack
  - serverless-appsync-plugin
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: 'us-east-1'
  profile: simplisurveydeveloper
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
        - SNS:Publish
        - SES:Publish
        - SNS:*
      Resource: "*"

resources:
  Parameters:
####BEGIN STANDARD PARAMS
    s3BucketName: 
      Type: String
      Default: "${self:custom.uploadBucketName}"
    identityPoolName: 
      Type: String
      Default: "cognito${self:custom.stage}_identitypool_${self:custom.stage}"
    allowUnauthenticatedIdentities: 
      Type: String
      Default: false
    thirdPartyAuth: 
      Type: String
      Default: false
    lambdaLogPolicy: 
      Type: String
      Default: "cognito${self:custom.stage}_lambda_log_policy"
    openIdLambdaRoleName: 
      Type: String
      Default: "cognito${self:custom.stage}_openid_lambda_role"
    openIdRolePolicy: 
      Type: String
      Default: "cognito${self:custom.stage}_openid_pass_role_policy"
    openIdLambdaIAMPolicy: 
      Type: String
      Default: "cognito${self:custom.stage}_openid_lambda_iam_policy"
    openIdLogPolicy: 
      Type: String
      Default: "cognito${self:custom.stage}_openid_lambda_log_policy"
    userPoolName: 
      Type: String
      Default: "cognito${self:custom.stage}_userpool_${self:custom.stage}"
    autoVerifiedAttributes:
      Type: CommaDelimitedList
      Default: phone_number,email
    mfaConfiguration: 
      Type: String
      Default: 'OFF'
    mfaTypes:
      Type: CommaDelimitedList
      Default: "SMS Text Message"
    roleName: 
      Type: String
      Default: "cognito${self:custom.stage}_sns-role"
    roleExternalId: 
      Type: String
      Default: "cognito${self:custom.stage}_role_external_id"
    policyName: 
      Type: String
      Default: "cognito${self:custom.stage}-sns-policy"
    smsAuthenticationMessage: 
      Type: String
      Default: "Your authentication code is {####}"
    smsVerificationMessage: 
      Type: String
      Default: "Your verification code is {####}"
    emailVerificationSubject: 
      Type: String
      Default: "Your verification code"
    emailVerificationMessage: 
      Type: String
      Default: "Your verification code is {####}"
    defaultPasswordPolicy: 
      Type: String
      Default: false
    passwordPolicyMinLength: 
      Type: Number
      Default: 8
    passwordPolicyCharacters:
      Type: CommaDelimitedList
      Default: "Requires Lowercase,Requires Uppercase,Requires Numbers,Requires Symbols"
    requiredAttributes:
      Type: CommaDelimitedList
      Default: email
    userpoolClientName: 
      Type: String
      Default: "cognito${self:custom.stage}_app_client"
    userpoolClientGenerateSecret: 
      Type: String
      Default: true
    userpoolClientRefreshTokenValidity: 
      Type: Number
      Default: 30
    userpoolClientReadAttributes:
      Type: CommaDelimitedList
      Default: email
    mfaLambdaRole:
      Type: String 
      Default: "cognito${self:custom.stage}_totp_lambda_role"
    mfaLambdaLogPolicy: 
      Type: String
      Default: "cognito${self:custom.stage}_totp_lambda_log_policy"
    mfaPassRolePolicy: 
      Type: String
      Default: "cognito${self:custom.stage}_totp_pass_role_policy"
    mfaLambdaIAMPolicy: 
      Type: String
      Default: "cognito${self:custom.stage}_totp_lambda_iam_policy"
    userpoolClientLambdaRole: 
      Type: String
      Default: "cognito${self:custom.stage}_userpoolclient_lambda_role"
    userpoolClientLogPolicy: 
      Type: String
      Default: "cognito${self:custom.stage}_userpoolclient_lambda_log_policy"
    userpoolClientLambdaPolicy: 
      Type: String
      Default: "cognito${self:custom.stage}_userpoolclient_lambda_iam_policy"
    userpoolClientSetAttributes: 
      Type: String
      Default: false
    useDefault: 
      Type: String
      Default: default
    unAuthRoleName: 
      Type: String
      Default: "client-${self:custom.stage}-${self:custom.accountId}-unauthRole"
    authRoleName: 
      Type: String
      Default: "client-${self:custom.stage}-${self:custom.accountId}-authRole"
    unAuthRoleArn:
      Type: String 
      Default: "arn:aws:iam::${self:custom.accountId}:role/client-${self:custom.stage}-${self:custom.accountId}-unauthRole"
    authRoleArn: 
      Type: String
      Default: "arn:aws:iam::${self:custom.accountId}:role/client-${self:custom.stage}-${self:custom.accountId}-authRole"
    resourceName: 
      Type: String
      Default: "cognito${self:custom.stage}"
    authSelections: 
      Type: String
      Default: identityPoolAndUserPool
    appId:
      Type: String
      Default: ${self:custom.pinpointAppId}
    appName:
      Type: String
      Default: "${self:service.name}-${self:custom.stage}"

####END STANDARD PARAMS

####BEGIN STANDARD CONDITIONS
  Conditions:
    ShouldCreatePinpointApp:
      Fn::Equals:
        - Ref: appId
        - "NONE"
####END STANDARD CONDITIONS

  Resources:
    SMSTopic:
      Type: AWS::SNS::Topic
      Properties: 
        DisplayName: "sms${self:custom.stage}"
        TopicName: "sms${self:custom.stage}"

    OrganizationTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.stage}-Organizations"
    

    InvitationTable:
      DependsOn: UserTable
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: organizationId
            AttributeType: S
          -
            AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.stage}-Invitations"
        GlobalSecondaryIndexes: 
          - 
            IndexName: "organizationId-id-index"
            KeySchema: 
              - 
                AttributeName: "organizationId"
                KeyType: "HASH"
              - 
                AttributeName: "id"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"
    UserTable:
      DependsOn: OrganizationTable
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: createdAt
            AttributeType: S
          -
            AttributeName: organizationId
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.stage}-Users"
        GlobalSecondaryIndexes: 
          - 
            IndexName: "organizationId-createdAt-index"
            KeySchema: 
              - 
                AttributeName: "organizationId"
                KeyType: "HASH"
              - 
                AttributeName: "createdAt"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"
    AssignedRoleTable:
      DependsOn: UserTable
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: roleId
            AttributeType: S
          -
            AttributeName: userId
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.stage}-AssignedRoles"
        GlobalSecondaryIndexes: 
          - 
            IndexName: "roleId-userId-index"
            KeySchema: 
              - 
                AttributeName: "roleId"
                KeyType: "HASH"
              - 
                AttributeName: "userId"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"
          - 
            IndexName: "userId-roleId-index"
            KeySchema: 
              - 
                AttributeName: "userId"
                KeyType: "HASH"
              - 
                AttributeName: "roleId"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"
    RoleTable:
      DependsOn: AssignedRoleTable
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: name
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.stage}-Roles"
        GlobalSecondaryIndexes: 
          - 
            IndexName: "name-id-index"
            KeySchema: 
              - 
                AttributeName: "name"
                KeyType: "HASH"
              - 
                AttributeName: "id"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"
    CampaignTable:
      DependsOn: RoleTable
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: organizationId
            AttributeType: S
          -
            AttributeName: templateId
            AttributeType: S
          -
            AttributeName: createdAt
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.stage}-Campaigns"
        GlobalSecondaryIndexes: 
          - 
            IndexName: "organizationId-createdAt-index"
            KeySchema: 
              - 
                AttributeName: "organizationId"
                KeyType: "HASH"
              - 
                AttributeName: "createdAt"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"
          - 
            IndexName: "templateId-createdAt-index"
            KeySchema: 
              - 
                AttributeName: "templateId"
                KeyType: "HASH"
              - 
                AttributeName: "createdAt"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"
    CampaignTemplateTable:
      DependsOn: CampaignTable
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.stage}-CampaignTemplates"
    PromptTable:
      DependsOn: CampaignTemplateTable
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: surveyTemplateId
            AttributeType: S
          -
            AttributeName: position
            AttributeType: N
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.stage}-Prompts"
        GlobalSecondaryIndexes: 
          - 
            IndexName: "surveyTemplateId-position-index"
            KeySchema: 
              - 
                AttributeName: "surveyTemplateId"
                KeyType: "HASH"
              - 
                AttributeName: "position"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"
    OptionTable:
      DependsOn: PromptTable
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: promptId
            AttributeType: S
          -
            AttributeName: position
            AttributeType: N
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.stage}-Options"
        GlobalSecondaryIndexes: 
          - 
            IndexName: "promptId-position-index"
            KeySchema: 
              - 
                AttributeName: "promptId"
                KeyType: "HASH"
              - 
                AttributeName: "position"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"      
    SurveyTemplateTable:
      DependsOn: OptionTable
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: campaignTemplateId
            AttributeType: S
          -
            AttributeName: position
            AttributeType: N
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.stage}-SurveyTemplates"
        GlobalSecondaryIndexes: 
          - 
            IndexName: "campaignTemplateId-position-index"
            KeySchema: 
              - 
                AttributeName: "campaignTemplateId"
                KeyType: "HASH"
              - 
                AttributeName: "position"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"  
    SurveyTable:
      DependsOn: SurveyTemplateTable
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: userId
            AttributeType: S
          -
            AttributeName: campaignId
            AttributeType: S
          -
            AttributeName: surveyTemplateId
            AttributeType: S
          -
            AttributeName: createdAt
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.stage}-Surveys"
        GlobalSecondaryIndexes: 
          - 
            IndexName: "surveyTemplateId-createdAt-index"
            KeySchema: 
              - 
                AttributeName: "surveyTemplateId"
                KeyType: "HASH"
              - 
                AttributeName: "createdAt"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1" 
          - 
            IndexName: "campaignId-createdAt-index"
            KeySchema: 
              - 
                AttributeName: "campaignId"
                KeyType: "HASH"
              - 
                AttributeName: "createdAt"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1" 
          - 
            IndexName: "userId-createdAt-index"
            KeySchema: 
              - 
                AttributeName: "userId"
                KeyType: "HASH"
              - 
                AttributeName: "createdAt"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"  
    ResponseTable:
      DependsOn: SurveyTable
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: optionId
            AttributeType: S
          -
            AttributeName: surveyId
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.stage}-Responses"
        GlobalSecondaryIndexes: 
          - 
            IndexName: "optionId-id-index"
            KeySchema: 
              - 
                AttributeName: "optionId"
                KeyType: "HASH"
              - 
                AttributeName: "id"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1" 
          - 
            IndexName: "surveyId-id-index"
            KeySchema: 
              - 
                AttributeName: "surveyId"
                KeyType: "HASH"
              - 
                AttributeName: "id"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"                                

####BEGIN STANDARD RESOURCES
    LambdaExecutionRole:
      Condition: ShouldCreatePinpointApp
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${self:service.name}-${self:custom.stage}-PinpointRole"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Policies:
        - PolicyName: "${self:service.name}-${self:custom.stage}-PinpointCloudWatchPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - PolicyName: "${self:service.name}-${self:custom.stage}-PinpointPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - mobileanalytics:*
              - mobiletargeting:*
              Resource: "*"

    PinpointFunction:
      Type: AWS::Lambda::Function
      Condition: ShouldCreatePinpointApp
      Properties:
        Code:
          ZipFile:
            Fn::Join:
            - "\n"
            - - const response = require('cfn-response');
              - const aws = require('aws-sdk');
              - 'const pinpoint = new aws.Pinpoint({ apiVersion: ''2016-12-01'', region:
                ''us-east-1'' });'
              - exports.handler = function(event, context) {
              - "    if (event.RequestType == 'Delete') {"
              - "        response.send(event, context, response.SUCCESS);"
              - "        return;"
              - "    }"
              - "    if (event.RequestType == 'Update') {"
              - "        response.send(event, context, response.SUCCESS);"
              - "        return;"
              - "    }"
              - "    if (event.RequestType == 'Create') {"
              - "       const appName = event.ResourceProperties.appName;"
              - "       let responseData = {};"
              - "       const params = {"
              - "           CreateApplicationRequest: {"
              - "               Name: appName"
              - "           }"
              - "       };"
              - "       return pinpoint.createApp(params).promise()"
              - "           .then((res) => {"
              - "               responseData = res.ApplicationResponse;"
              - "               response.send(event, context, response.SUCCESS, responseData);"
              - "           }).catch((err) => {"
              - "               console.log(err.stack);"
              - "               responseData = {Error: err};"
              - "               response.send(event, context, response.FAILED, responseData);"
              - "               throw err;"
              - "           });"
              - "    }"
              - "};"
        Handler: index.handler
        Runtime: nodejs6.10
        Timeout: '300'
        Role:
          Fn::GetAtt:
          - LambdaExecutionRole
          - Arn

    PinpointFunctionOutputs:
      Type: Custom::LambdaCallout
      Condition: ShouldCreatePinpointApp
      Properties:
        ServiceToken:
          Fn::GetAtt:
          - PinpointFunction
          - Arn
        appName:
          Ref: appName
          
    authRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/"
        Policies:
          -
            PolicyName: authPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "ses:SendRawEmail"
                    - "ses:SendEmail"
                    - "sns:Publish"
                    - "cloudformation:CreateStack"
                    - "cloudformation:UpdateStack"
                    - "cloudformation:DeleteStack"
                    - "cloudformation:CreateUploadBucket"
                    - "cloudformation:DescribeStacks"
                    - "cloudformation:DescribeStackEvents"
                    - "cloudformation:GetTemplateSummary"
                    - "cloudformation:ListStacks"
                    - "cloudformation:ListStackResources"
                    - "s3:CreateBucket"
                    - "s3:GetObject"
                    - "s3:PutObject"
                    - "mobiletargeting:UpdateEndpoint"
                    - "mobiletargeting:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*" 
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition: { "ForAnyValue:StringLike": {"cognito-identity.amazonaws.com:amr": "authenticated" }}
              Principal:
                Federated:
                  - "cognito-identity.amazonaws.com"
        RoleName: 
          Ref: authRoleName

    UnAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/"
        Policies:
          -
            PolicyName: unAuthPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "ses:SendRawEmail"
                    - "ses:SendEmail"
                    - "cloudformation:CreateStack"
                    - "cloudformation:UpdateStack"
                    - "cloudformation:DeleteStack"
                    - "cloudformation:CreateUploadBucket"
                    - "cloudformation:DescribeStacks"
                    - "cloudformation:DescribeStackEvents"
                    - "cloudformation:GetTemplateSummary"
                    - "cloudformation:ListStacks"
                    - "cloudformation:ListStackResources"
                    - "s3:CreateBucket"
                    - "s3:GetObject"
                    - "s3:PutObject"
                    - "mobiletargeting:UpdateEndpoint"
                    - "mobiletargeting:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*" 
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition: { "ForAnyValue:StringLike": {"cognito-identity.amazonaws.com:amr": "unauthenticated" }}
              Principal:
                Federated:
                  - "cognito-identity.amazonaws.com"
        RoleName: 
          Ref: unAuthRoleName
    
    SNSRole: 
      Type: AWS::IAM::Role
      Properties:
        RoleName: 
          Ref: roleName
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - Sid: ""
              Effect: "Allow"
              Principal: 
                Service: "cognito-idp.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
              Condition: 
                StringEquals:
                  sts:ExternalId: 
                    Ref: roleExternalId
        Policies: 
          - 
            PolicyName: 
              Ref: policyName
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - 
                  Effect: "Allow"
                  Action: 
                    - "sns:Publish"
                  Resource: "*"
    
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: 
          Ref: userPoolName
        Schema: 
          
          -
            Name: email
            Required: true
            Mutable: true
          
        
        AutoVerifiedAttributes: 
          Ref: autoVerifiedAttributes
        
        
        EmailVerificationMessage: 
          Ref: emailVerificationMessage
        EmailVerificationSubject: 
          Ref: emailVerificationSubject
              
        Policies:
          PasswordPolicy:
            MinimumLength: 
              Ref: passwordPolicyMinLength
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        MfaConfiguration: 
          Ref: mfaConfiguration
        SmsVerificationMessage: 
          Ref: smsVerificationMessage
        SmsConfiguration: 
          SnsCallerArn: 
             "Fn::GetAtt": [ SNSRole, Arn ]
          ExternalId: 
            Ref: roleExternalId 
      
    UserPoolClientWeb:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: cognito${self:custom.stage}_app_clientWeb
        
        RefreshTokenValidity: 
          Ref: userpoolClientRefreshTokenValidity
        UserPoolId: 
          Ref: UserPool
      DependsOn: UserPool

    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: 
          Ref: userpoolClientName
        
        GenerateSecret: 
          Ref: userpoolClientGenerateSecret
        RefreshTokenValidity: 
          Ref: userpoolClientRefreshTokenValidity
        UserPoolId: 
          Ref: UserPool
      DependsOn: UserPool

    UserPoolClientRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: 
          Ref: userpoolClientLambdaRole     
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
      DependsOn: UserPoolClient
    
    UserPoolClientLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        Code:
          ZipFile: 
            Fn::Join:
              - |+
              - - 'const response = require(''cfn-response'');'
                - 'const aws = require(''aws-sdk'');'
                - 'const identity = new aws.CognitoIdentityServiceProvider();'
                - 'exports.handler = (event, context, callback) => {'
                - ' if (event.RequestType == ''Delete'') { '
                - '   response.send(event, context, response.SUCCESS, {})'
                - ' }'
                - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
                - '   const params = {'
                - '     ClientId: event.ResourceProperties.clientId,'
                - '     UserPoolId: event.ResourceProperties.userpoolId'
                - '   };'
                - '   identity.describeUserPoolClient(params).promise()'
                - '     .then((res) => {'
                - '       response.send(event, context, response.SUCCESS, {''appSecret'': res.UserPoolClient.ClientSecret});'   
                - '     })'
                - '     .catch((err) => {'
                - '       response.send(event, context, response.FAILURE, {err});'
                - '     });'
                - ' }'
                - '};'
        Handler: index.handler
        Runtime: nodejs6.10
        Timeout: '300'
        Role: 
           "Fn::GetAtt": [ UserPoolClientRole, Arn ]
      DependsOn: UserPoolClientRole

    UserPoolClientLambdaPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyName: 
          Ref: userpoolClientLambdaPolicy
        Roles: 
          - 
            Ref: userpoolClientLambdaRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'cognito-idp:DescribeUserPoolClient'
              Resource:
                Fn::GetAtt: [ UserPool, Arn ]
      DependsOn: UserPoolClientLambda
    UserPoolClientLogPolicy:
    # Sets log policy for the role that executes the Userpool Client Lambda
    # Depends on UserPool for Arn
    # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyName: #"cognito${self:custom.stage}_userpoolclient_lambda_log_policy"
          Ref: userpoolClientLogPolicy
        Roles: 
          # - "cognito${self:custom.stage}_userpoolclient_lambda_role"
          - Ref: userpoolClientLambdaRole
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: "*" 
                
      DependsOn: UserPoolClientLambdaPolicy  
    UserPoolClientInputs:
    # Values passed to Userpool client Lambda
    # Depends on UserPool for Id
    # Depends on UserPoolClient for Id
    # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
      Type: 'Custom::LambdaCallout'
      Properties:
        ServiceToken: 
          "Fn::GetAtt": [ UserPoolClientLambda, Arn ]
        clientId: 
          Ref: UserPoolClient
        userpoolId: 
          Ref: UserPool
      DependsOn: UserPoolClientLogPolicy
    
      
    # BEGIN IDENTITY POOL RESOURCES
    
    
    IdentityPool:
    # Always created
      Type: AWS::Cognito::IdentityPool
      Properties: 
        IdentityPoolName: cognito${self:custom.stage}_identitypool_${self:custom.stage}
        
        CognitoIdentityProviders:
          - ClientId:  
              Ref: UserPoolClient
            ProviderName: 
              'Fn::Join':
                - '/'
                - 
                  - "cognito-idp.${self:custom.region}.amazonaws.com"
                  - Ref: UserPool
          - ClientId:  
              Ref: UserPoolClientWeb
            ProviderName: 
              'Fn::Join':
                - '/'
                - 
                  - "cognito-idp.${self:custom.region}.amazonaws.com"
                  - Ref: UserPool
              
        AllowUnauthenticatedIdentities: 
          Ref: allowUnauthenticatedIdentities
        
        
      DependsOn: UserPoolClientInputs 
      
    
    IdentityPoolRoleMap:
    # Created to map Auth and Unauth roles to the identity pool
    # Depends on Identity Pool for ID ref
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties: 
        IdentityPoolId: 
          Ref: IdentityPool
        Roles:
            unauthenticated: 
              Ref: unAuthRoleArn
            authenticated: 
              Ref: authRoleArn
      DependsOn: IdentityPool    
    UploadBucketPolicy: 
      DependsOn: UploadBucket
      Type: AWS::S3::BucketPolicy
      Properties: 
        Bucket: 
          Ref: UploadBucket
        PolicyDocument: 
          Statement: 
            - 
              Action: 
                - "s3:GetObject"
              Effect: "Allow"
              Resource: 
                Fn::Join: 
                  - ""
                  - 
                    - "arn:aws:s3:::"
                    - ${self:custom.uploadBucketName}
                    - "/*"
              Principal:
                AWS: { 'Fn::Join': ['', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ', { 'Ref': "OriginAccessIdentity" }]] }
            - 
              Action: 
                - "s3:GetObject"
              Effect: "Allow"
              Resource: 
                Fn::Join: 
                  - ""
                  - 
                    - "arn:aws:s3:::"
                    - ${self:custom.uploadBucketName}
                    - "/*"
              Principal: '*'
    OriginAccessIdentity:
      Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
      Properties:
         CloudFrontOriginAccessIdentityConfig:
          Comment: "AccessFor"
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: 
          Ref: s3BucketName
    CDN:
      DependsOn: UploadBucket
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
          Enabled: true
          HttpVersion: http2
          Origins:
            - DomainName: "${self:custom.uploadBucketName}.s3.amazonaws.com"
              Id: "S3-${self:custom.uploadBucketName}"
              S3OriginConfig:
                OriginAccessIdentity: { 'Fn::Join': ['/', ['origin-access-identity', 'cloudfront', { 'Ref': "OriginAccessIdentity" }]] }
          DefaultCacheBehavior:
            ViewerProtocolPolicy: https-only
            TargetOriginId: "S3-${self:custom.uploadBucketName}"
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            MinTTL: 0
            ForwardedValues:
              QueryString: false
    RepoSNSTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        Subscription:
        - Endpoint: "support@gunnertech.com"
          Protocol: email
    MyRepo:
      Type: "AWS::CodeCommit::Repository"
      DependsOn: RepoSNSTopic
      Properties:
        RepositoryName: ${self:service.name}
        RepositoryDescription: CodeCommit Repository
        Triggers:
        - Name: MasterTrigger
          DestinationArn:
            Ref: RepoSNSTopic
          Events:
          - all
####END STANDARD RESOURCES
    

functions:
  dummy: # NEED AT LEAST ONE FUNCTION OR WON'T DEPLOY
    handler: first.hello
