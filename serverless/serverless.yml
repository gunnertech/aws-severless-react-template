service:
  name: ${self:custom.environment.SERVICE}

custom:
  accountId: { Ref: AWS::AccountId }
  identifier: ${self:service.name}-${self:custom.stage}
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):dev}
  secrets: ${file(secrets.yml):${self:custom.stage}, file(secrets.yml):dev}
  createDbCluster: ${self:custom.environment.CREATE_DB_CLUSTER}
  domainName: ${self:custom.environment.DOMAIN_NAME}
  userPoolId: ${self:custom.environment.USER_POOL_ID}
  guestUserName: ${self:custom.environment.GUEST_USER_NAME}
  authRoleName: ${self:custom.environment.AUTH_ROLE_NAME}
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  uploadBucketName: "com-gunnertech-${self:service.name}-${self:custom.stage}"
  output:
    handler: scripts/output.handler
    file: .build/stack.yml
  # nested-stacks:
  #   location: stacks
  #   stacks:
  #     - id: MigrationsNestedStack
  #       template: migrations.yml
  #       enabled: true
  #       timeout: 60
  #       parameters:
  #         - InstanceType: t1.micro
  #         - BlahBlah: abc123

plugins:
  - serverless-webpack
  - serverless-stack-output
  # - serverless-aws-nested-stacks
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.environment.REGION, 'us-east-1'}
  profile: "${self:service.name}-${opt:stage, 'dev'}developer"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
        - SNS:Publish
        - SES:Publish
        - SNS:*
      Resource: "*"

resources:
  Parameters:
    awsRegion:
      Type: String
      Default: ${self:custom.region}
    dbClusterMasterUserName:
      Type: String
      Default: ${self:custom.secrets.DB_CLUSTER_MASTER_USERNAME, 'NONE'}
    dbClusterMasterPassword:
      Type: String
      Default: ${self:custom.secrets.DB_CLUSTER_MASTER_PASSWORD, 'NONE'}
    identifier:
      Type: String
      Default: ${self:custom.identifier}
    domainName:
      Type: String
      Default: ${self:custom.domainName, 'NONE'}
    userPoolId:
      Type: String
      Default: ${self:custom.userPoolId, 'NONE'}
    guestUserName:
      Type: String
      Default: ${self:custom.guestUserName, 'NONE'}
    authRoleName:
      Type: String
      Default: ${self:custom.authRoleName, 'NONE'}

  Conditions:
    HasClusterUserName:
      Fn::Not:
        - Fn::Equals:
          - Ref: dbClusterMasterUserName
          - 'NONE'
    
    ShouldCreateDbCluster:
      Fn::And:
        - Fn::Not:
          - Fn::Equals:
            - Ref: dbClusterMasterPassword
            - "NONE"
        - Condition: HasClusterUserName

    ShouldCreateGuestUser:
      Fn::And:
        - Fn::Not:
          - Fn::Equals:
            - Ref: guestUserName
            - "NONE"
        - Condition: ShouldCreateUserPoolGroups
        
    ShouldCreateUserPoolGroups:
      Fn::Not:
        - Fn::Equals:
          - Ref: userPoolId
          - "NONE"

    ShouldCreateHostedZone:
      Fn::Not:
        - Fn::Equals:
          - Ref: domainName
          - "NONE"

    ShouldCreateAddUserToGroupPolicy:
      Fn::Not:
        - Fn::Equals:
          - Ref: authRoleName
          - "NONE"
      
  Outputs:
    DbClusterArn:
      Condition: ShouldCreateDbCluster
      Description: ARN for the DB Cluster
      Value:
        "Fn::GetAtt": [ DbCluster, Arn ]

    CdnDomainName:
      Description: The domain name of the cloudfront distribution
      Value: 
        "Fn::GetAtt": [ CDN, DomainName ]

  Resources:
    DbSecret:
      Condition: ShouldCreateDbCluster
      Type: "AWS::SecretsManager::Secret"
      Properties:
        Name: HttpRDSSecret
        Description: "RDS DB Cluster Secret"
        SecretString: 
          Fn::Join: 
            - ''
            - - '{"username":"'
              - Ref: dbClusterMasterUserName
              - '","password":"'
              - Ref: dbClusterMasterPassword
              - '"}'

    DbCluster:
      Condition: ShouldCreateDbCluster
      Type: "AWS::RDS::DBCluster"
      Properties:
        SourceRegion:
          Ref: awsRegion
        Engine: 'aurora'
        EngineMode: 'serverless'
        MasterUsername: 
          Ref: dbClusterMasterUserName
        MasterUserPassword: 
          Ref: dbClusterMasterPassword
        DBClusterIdentifier: 
          Fn::Join: 
            - '-'
            - - Ref: identifier
              - 'cluster'

    AddUserToGroupIamPolicy:
      Condition: ShouldCreateAddUserToGroupPolicy
      Type: AWS::IAM::Policy
      Properties: 
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action: 
                - "cognito-idp:AdminAddUserToGroup"
                - "cognito-idp:DescribeUserPool"
              Resource: "arn:aws:cognito-idp:*:*:userpool/*"
        PolicyName: AddUserToGroupPolicy
        Roles:
          - Ref: authRoleName
          
    CognitoUserApiUser:
      Condition: ShouldCreateGuestUser
      Type: AWS::Cognito::UserPoolUser
      Properties:
        Username: 
          Ref: guestUserName
        DesiredDeliveryMediums:
          - EMAIL
        UserPoolId:
          Ref: userPoolId
        UserAttributes:
          - Name: email
            Value:
              Ref: guestUserName
          - Name: name
            Value: "API"
          - Name: email_verified
            Value: "true"

    CognitoUserPoolUsersGroup:
      Condition: ShouldCreateUserPoolGroups
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: Users
        UserPoolId:
          Ref: userPoolId

    CognitoUserPoolAdminsGroup:
      Condition: ShouldCreateUserPoolGroups
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: Admins
        UserPoolId:
          Ref: userPoolId

    UploadBucketPolicy: 
      Type: AWS::S3::BucketPolicy
      Properties: 
        Bucket: ${self:custom.uploadBucketName}
        PolicyDocument: 
          Statement: 
            - 
              Action: 
                - "s3:GetObject"
              Effect: "Allow"
              Resource: 
                Fn::Join: 
                  - ""
                  - 
                    - "arn:aws:s3:::"
                    - ${self:custom.uploadBucketName}
                    - "/*"
              Principal:
                AWS: { 'Fn::Join': ['', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ', { 'Ref': "OriginAccessIdentity" }]] }
            - 
              Action: 
                - "s3:GetObject"
              Effect: "Allow"
              Resource: 
                Fn::Join: 
                  - ""
                  - 
                    - "arn:aws:s3:::"
                    - ${self:custom.uploadBucketName}
                    - "/*"
              Principal: '*'
    OriginAccessIdentity:
      Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
      Properties:
         CloudFrontOriginAccessIdentityConfig:
          Comment: "AccessFor"
    CDN:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
          Enabled: true
          HttpVersion: http2
          Origins:
            - DomainName: "${self:custom.uploadBucketName}.s3.amazonaws.com"
              Id: "S3-${self:custom.uploadBucketName}"
              S3OriginConfig:
                OriginAccessIdentity: { 'Fn::Join': ['/', ['origin-access-identity', 'cloudfront', { 'Ref': "OriginAccessIdentity" }]] }
          DefaultCacheBehavior:
            ViewerProtocolPolicy: https-only
            TargetOriginId: "S3-${self:custom.uploadBucketName}"
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            MinTTL: 0
            ForwardedValues:
              QueryString: false
    RepoSNSTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        Subscription:
        - Endpoint: "support@gunnertech.com"
          Protocol: email
    MyRepo:
      Type: "AWS::CodeCommit::Repository"
      DependsOn: RepoSNSTopic
      Properties:
        RepositoryName: ${self:service.name}-${self:custom.stage}
        RepositoryDescription: CodeCommit Repository
        Triggers:
        - Name: MasterTrigger
          DestinationArn:
            Ref: RepoSNSTopic
          Events:
          - all
    DNS: 
      Condition: ShouldCreateHostedZone
      Type: "AWS::Route53::HostedZone"
      Properties: 
        HostedZoneConfig: 
          Comment: "My hosted zone for ${self:custom.domainName}"
        Name: ${self:custom.domainName}

    SMSTopic:
      Type: AWS::SNS::Topic
      Properties: 
        DisplayName: "sms${self:custom.stage}"
        TopicName: "sms${self:custom.stage}"    

functions:
  dummy: # NEED AT LEAST ONE FUNCTION OR WON'T DEPLOY
    handler: first.hello
